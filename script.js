document.addEventListener('DOMContentLoaded', function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    const BOT_TOKEN = '6731114231:AAGzev_SCeljR5txCCCJPxYRJC4XFgk71_8';
    const CHAT_ID = '791374398';
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
    async function sendToTelegram(message) {
      try {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
            parse_mode: 'HTML'
          })
        });
        
        return await response.json();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return { ok: false };
      }
    }
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º
    document.querySelectorAll('form').forEach(form => {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        const agreement = form.querySelector('input[name="agreement"]');
        if (agreement && !agreement.checked) {
          showError(form, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö');
          return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        let formType = '';
        if (form.id === 'calculator-form') {
          formType = 'üìä <b>–§–æ—Ä–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–ó–µ–ª–µ–Ω–∞—è)</b>';
          updateResults(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        } 
        else if (form.id === 'callback-form') formType = 'üìû <b>–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ (–û—Ä–∞–Ω–∂–µ–≤–∞—è)</b>';
        else if (form.id === 'support-form') formType = 'üõ† <b>–§–æ—Ä–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>';
        else formType = 'üìù <b>–û–±—â–∞—è —Ñ–æ—Ä–º–∞</b>';
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = new FormData(form);
        let message = `${formType}\n\n`;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if (form.id === 'calculator-form') {
          const buildingType = form.querySelector('input[name="building-type"]:checked').value;
          const length = form.querySelector('input[name="length"]').value;
          const width = form.querySelector('input[name="width"]').value;
          const height = form.querySelector('input[name="height"]').value;
          
          message += `<b>üè¢ –¢–∏–ø –∑–¥–∞–Ω–∏—è:</b> ${
            buildingType === 'industrial' ? '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä' :
            buildingType === 'agricultural' ? '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä' :
            '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ'
          }\n`;
          
          message += `<b>üìè –†–∞–∑–º–µ—Ä—ã:</b> ${length} √ó ${width} √ó ${height} –º\n`;
          message += `<b>üìê –ü–ª–æ—â–∞–¥—å:</b> ${length * width} –º¬≤\n`;
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
          const options = [];
          form.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
            switch(checkbox.name) {
              case 'insulation': options.push('–£—Ç–µ–ø–ª–µ–Ω–∏–µ'); break;
              case 'ventilation': options.push('–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è'); break;
              case 'electricity': options.push('–≠–ª–µ–∫—Ç—Ä–∏–∫–∞'); break;
              case 'heating': options.push('–û—Ç–æ–ø–ª–µ–Ω–∏–µ'); break;
              case 'plumbing': options.push('–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
              case 'fire-protection': options.push('–ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
            }
          });
          
          message += `<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</b> ${
            options.length > 0 ? options.join(', ') : '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π'
          }\n\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        for (let [name, value] of formData.entries()) {
          if (name !== 'agreement' && !(form.id === 'calculator-form' && 
              ['building-type', 'length', 'width', 'height', 'insulation', 
               'ventilation', 'electricity', 'heating', 'plumbing', 'fire-protection'].includes(name))) {
            const fieldName = {
              'name': 'üë§ –ò–º—è',
              'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
              'email': 'üìß Email',
              'message': '‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ',
              'time': '‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞'
            }[name] || name;
            
            message += `<b>${fieldName}:</b> ${value}\n`;
          }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const result = await sendToTelegram(message);
        
        if (result.ok) {
          showSuccess(form);
          form.reset();
          
          // –°–±—Ä–æ—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
          if (form.id === 'calculator-form') {
            resetCalculator();
          }
        } else {
          showError(form, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      });
    });
    
    // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    function resetCalculator() {
      const steps = document.querySelectorAll('.step');
      const stepIndicators = document.querySelectorAll('.step-indicator');
      const stepConnectors = document.querySelectorAll('.step-connector');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
      steps.forEach((step, index) => {
        step.classList.toggle('active', index === 0);
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
      stepIndicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === 0);
      });
      
      stepConnectors.forEach(connector => {
        connector.classList.remove('active');
      });
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    function showSuccess(form) {
      let successElement = form.querySelector('.success-message') || 
                          document.getElementById(`${form.id}-success`);
      
      if (!successElement) {
        successElement = document.createElement('div');
        successElement.className = 'success-message';
        successElement.textContent = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.';
        form.appendChild(successElement);
      }
      
      successElement.style.display = 'block';
      setTimeout(() => {
        successElement.style.display = 'none';
      }, 3000);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    function showError(form, message) {
      let errorElement = form.querySelector('.error-message') || 
                        document.getElementById(`${form.id}-error`);
      
      if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        form.appendChild(errorElement);
      }
      
      errorElement.textContent = message;
      errorElement.style.display = 'block';
      
      setTimeout(() => {
        errorElement.style.display = 'none';
      }, 3000);
    }
  
    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
    const calculatorForm = document.getElementById('calculator-form');
    if (calculatorForm) {
      const steps = document.querySelectorAll('.step');
      const nextButtons = document.querySelectorAll('.next-step');
      const prevButtons = document.querySelectorAll('.prev-step');
      const stepIndicators = document.querySelectorAll('.step-indicator');
      const stepConnectors = document.querySelectorAll('.step-connector');
      let currentStep = 0;
      
      // –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –∑–¥–∞–Ω–∏—è
      const lengthInput = calculatorForm.querySelector('input[name="length"]');
      const widthInput = calculatorForm.querySelector('input[name="width"]');
      const buildingAreaElement = document.getElementById('building-area');
      
      function updateBuildingArea() {
        const length = parseFloat(lengthInput.value) || 0;
        const width = parseFloat(widthInput.value) || 0;
        buildingAreaElement.textContent = (length * width).toFixed(0);
      }
      
      lengthInput.addEventListener('input', updateBuildingArea);
      widthInput.addEventListener('input', updateBuildingArea);
      
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —à–∞–≥–æ–≤
      nextButtons.forEach(button => {
        button.addEventListener('click', function() {
          if (validateStep(currentStep)) {
            steps[currentStep].classList.remove('active');
            currentStep++;
            steps[currentStep].classList.add('active');
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            updateStepIndicators();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
            if (currentStep === 3) {
              updateResults();
            }
          }
        });
      });
      
      prevButtons.forEach(button => {
        button.addEventListener('click', function() {
          steps[currentStep].classList.remove('active');
          currentStep--;
          steps[currentStep].classList.add('active');
          updateStepIndicators();
        });
      });
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–æ–≤
      function validateStep(step) {
        if (step === 1) { // –®–∞–≥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
          const length = parseFloat(lengthInput.value);
          const width = parseFloat(widthInput.value);
          const height = parseFloat(calculatorForm.querySelector('input[name="height"]').value);
          
          if (isNaN(length) || length < 6 || length > 100) {
            showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É (6-100 –º)');
            return false;
          }
          if (isNaN(width) || width < 6 || width > 50) {
            showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É (6-50 –º)');
            return false;
          }
          if (isNaN(height) || height < 3 || height > 12) {
            showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É (3-12 –º)');
            return false;
          }
        }
        return true;
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —à–∞–≥–æ–≤
      function updateStepIndicators() {
        stepIndicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index <= currentStep);
        });
        
        stepConnectors.forEach((connector, index) => {
          connector.classList.toggle('active', index < currentStep);
        });
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
      function updateResults() {
        const buildingType = calculatorForm.querySelector('input[name="building-type"]:checked').value;
        const length = parseFloat(lengthInput.value);
        const width = parseFloat(widthInput.value);
        const height = parseFloat(calculatorForm.querySelector('input[name="height"]').value);
        const area = length * width;
        
        // –¢–∏–ø –∑–¥–∞–Ω–∏—è
        let buildingTypeText = '';
        switch (buildingType) {
          case 'industrial': buildingTypeText = '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä'; break;
          case 'agricultural': buildingTypeText = '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä'; break;
          case 'commercial': buildingTypeText = '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ'; break;
        }
        
        document.getElementById('result-type').textContent = buildingTypeText;
        document.getElementById('result-dimensions').textContent = `${length} √ó ${width} √ó ${height} –º`;
        document.getElementById('result-area').textContent = `${area} –º¬≤`;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        const options = [];
        const checkboxes = calculatorForm.querySelectorAll('input[type="checkbox"]:checked');
        checkboxes.forEach(checkbox => {
          switch (checkbox.name) {
            case 'insulation': options.push('–£—Ç–µ–ø–ª–µ–Ω–∏–µ'); break;
            case 'ventilation': options.push('–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è'); break;
            case 'electricity': options.push('–≠–ª–µ–∫—Ç—Ä–∏–∫–∞'); break;
            case 'heating': options.push('–û—Ç–æ–ø–ª–µ–Ω–∏–µ'); break;
            case 'plumbing': options.push('–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
            case 'fire-protection': options.push('–ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
          }
        });
        
        const optionsList = document.getElementById('result-options');
        optionsList.innerHTML = '';
        if (options.length > 0) {
          options.forEach(option => {
            const li = document.createElement('li');
            li.className = 'mb-1';
            li.textContent = option;
            optionsList.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.className = 'mb-1';
          li.textContent = '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π';
          optionsList.appendChild(li);
        }
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        let basePrice = 20000; // –¶–µ–Ω–∞ –∑–∞ –º¬≤
        switch (buildingType) {
          case 'industrial': basePrice = 20000; break;
          case 'agricultural': basePrice = 18000; break;
          case 'commercial': basePrice = 25000; break;
        }
        
        let totalPrice = area * basePrice;
        checkboxes.forEach(() => {
          totalPrice += area * 1000; // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–∞–∂–¥—É—é –æ–ø—Ü–∏—é
        });
        
        document.getElementById('result-price').textContent = 
          new Intl.NumberFormat('ru-RU').format(totalPrice) + ' ‚ÇΩ';
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      updateBuildingArea();
    }
    
    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–º–µ–Ω—é, –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  });


  document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const calculatorForm = document.getElementById('calculator-form');
    if (calculatorForm) {
      const steps = document.querySelectorAll('#calculator-form .step');
      const nextButtons = document.querySelectorAll('#calculator-form .next-step');
      const prevButtons = document.querySelectorAll('#calculator-form .prev-step');
      const stepIndicators = document.querySelectorAll('.step-indicator');
      const stepConnectors = document.querySelectorAll('.step-connector');
      let currentStep = 0;
  
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —à–∞–≥
      steps.forEach((step, index) => {
        step.classList.toggle('active', index === 0);
      });
  
      // –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –∑–¥–∞–Ω–∏—è
      const lengthInput = calculatorForm.querySelector('input[name="length"]');
      const widthInput = calculatorForm.querySelector('input[name="width"]');
      const buildingAreaElement = document.getElementById('building-area');
  
      function updateBuildingArea() {
        const length = parseFloat(lengthInput.value) || 0;
        const width = parseFloat(widthInput.value) || 0;
        buildingAreaElement.textContent = (length * width).toFixed(0);
      }
  
      if (lengthInput && widthInput) {
        lengthInput.addEventListener('input', updateBuildingArea);
        widthInput.addEventListener('input', updateBuildingArea);
        updateBuildingArea(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç
      }
  
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      nextButtons.forEach(button => {
        button.addEventListener('click', function() {
          if (validateCurrentStep()) {
            goToStep(currentStep + 1);
          }
        });
      });
  
      prevButtons.forEach(button => {
        button.addEventListener('click', function() {
          goToStep(currentStep - 1);
        });
      });
  
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
      function validateCurrentStep() {
        switch (currentStep) {
          case 1: // –®–∞–≥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
            const length = parseFloat(lengthInput.value);
            const width = parseFloat(widthInput.value);
            const height = parseFloat(calculatorForm.querySelector('input[name="height"]').value);
  
            if (isNaN(length) || length < 6 || length > 100) {
              showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É (6-100 –º)');
              return false;
            }
            if (isNaN(width) || width < 6 || width > 50) {
              showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É (6-50 –º)');
              return false;
            }
            if (isNaN(height) || height < 3 || height > 12) {
              showError(calculatorForm, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É (3-12 –º)');
              return false;
            }
            return true;
  
          default:
            return true;
        }
      }
  
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
      function goToStep(stepIndex) {
        if (stepIndex < 0 || stepIndex >= steps.length) return;
  
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        steps[currentStep].classList.remove('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
        currentStep = stepIndex;
        steps[currentStep].classList.add('active');
  
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
        updateStepIndicators();
  
        // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (currentStep === 3) {
          updateResults();
        }
      }
  
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —à–∞–≥–æ–≤
      function updateStepIndicators() {
        stepIndicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index <= currentStep);
        });
  
        stepConnectors.forEach((connector, index) => {
          connector.classList.toggle('active', index < currentStep);
        });
      }
  
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
      function updateResults() {
        const buildingType = calculatorForm.querySelector('input[name="building-type"]:checked').value;
        const length = parseFloat(lengthInput.value);
        const width = parseFloat(widthInput.value);
        const height = parseFloat(calculatorForm.querySelector('input[name="height"]').value);
        const area = length * width;
  
        // –¢–∏–ø –∑–¥–∞–Ω–∏—è
        let buildingTypeText = '';
        switch (buildingType) {
          case 'industrial': buildingTypeText = '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä'; break;
          case 'agricultural': buildingTypeText = '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–≥–∞—Ä'; break;
          case 'commercial': buildingTypeText = '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ'; break;
        }
  
        document.getElementById('result-type').textContent = buildingTypeText;
        document.getElementById('result-dimensions').textContent = `${length} √ó ${width} √ó ${height} –º`;
        document.getElementById('result-area').textContent = `${area} –º¬≤`;
  
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        const options = [];
        const checkboxes = calculatorForm.querySelectorAll('input[type="checkbox"]:checked');
        checkboxes.forEach(checkbox => {
          switch (checkbox.name) {
            case 'insulation': options.push('–£—Ç–µ–ø–ª–µ–Ω–∏–µ'); break;
            case 'ventilation': options.push('–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è'); break;
            case 'electricity': options.push('–≠–ª–µ–∫—Ç—Ä–∏–∫–∞'); break;
            case 'heating': options.push('–û—Ç–æ–ø–ª–µ–Ω–∏–µ'); break;
            case 'plumbing': options.push('–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
            case 'fire-protection': options.push('–ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'); break;
          }
        });
  
        const optionsList = document.getElementById('result-options');
        optionsList.innerHTML = '';
        if (options.length > 0) {
          options.forEach(option => {
            const li = document.createElement('li');
            li.className = 'mb-1';
            li.textContent = option;
            optionsList.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.className = 'mb-1';
          li.textContent = '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π';
          optionsList.appendChild(li);
        }
  
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        let basePrice = 20000; // –¶–µ–Ω–∞ –∑–∞ –º¬≤
        switch (buildingType) {
          case 'industrial': basePrice = 20000; break;
          case 'agricultural': basePrice = 18000; break;
          case 'commercial': basePrice = 25000; break;
        }
  
        let totalPrice = area * basePrice;
        checkboxes.forEach(() => {
          totalPrice += area * 1000; // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–∞–∂–¥—É—é –æ–ø—Ü–∏—é
        });
  
        document.getElementById('result-price').textContent = 
          new Intl.NumberFormat('ru-RU').format(totalPrice) + ' ‚ÇΩ';
      }
  
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —à–∞–≥–æ–≤
      updateStepIndicators();
    }
  
    // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    function showError(form, message) {
      let errorElement = form.querySelector('.error-message') || 
                        document.getElementById(`${form.id}-error`);
  
      if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        form.appendChild(errorElement);
      }
  
      errorElement.textContent = message;
      errorElement.style.display = 'block';
  
      setTimeout(() => {
        errorElement.style.display = 'none';
      }, 3000);
    }
  
    function showSuccess(form) {
      let successElement = form.querySelector('.success-message') || 
                          document.getElementById(`${form.id}-success`);
  
      if (!successElement) {
        successElement = document.createElement('div');
        successElement.className = 'success-message';
        successElement.textContent = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.';
        form.appendChild(successElement);
      }
  
      successElement.style.display = 'block';
      setTimeout(() => {
        successElement.style.display = 'none';
      }, 3000);
    }
  });